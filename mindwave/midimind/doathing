use_osc "localhost",4559

#loop detects the arrival of an OSC message addressed to "/hello"
#note Sonic Pi addes the preceeding /osc (/osc* needed if using 3.2dev)
live_loop :getOsc do
  b = sync "/osc*/hello"
  puts b[0]
  notes= eval b[0] #this turns "[.......]" into [.......]
  puts notes
  play_pattern_timed notes,[0.2],release: 0.2
end
#send an osc message from SonicPi to itself
osc "/hello",[67, 69, 71, 72, 74, 76, 78, 79]

sleep 4 #leave a delay
#eg 2
live_loop :getScale do
  data,duration,volume,synth = sync "/osc*/getScale"
  notes = eval data
  n=notes.length
  use_synth synth
  (4*n).times do
    play notes.tick,release: duration,amp: volume
    sleep duration
  end
end

data = scale(:g4,:major,num_octaves: 2)
duration = 0.1
volume = 0.7
synth = "tb303"
#send osc message. data will be a ring
osc "/getScale",data,duration,volume,synth